What happens when you initialize a repository? Why do you need to do it?

	When initializing a repository, a file named '.git' will be created under the directory. I can use log status to see what had happened and the status of this newly-created repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Some files in the working directory may not be in the staging area, while some may be. Therefore, staging area can be seen as an container for files waiting to be commited in the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	Whenever I changed the files in the working directory, I can use 'git add <file>' to add the modified files into staging area. If I want to see the differences between the two, I can use 'git diff' without arguments. When I am sure this change is big enough to be logical change, I commit it to the repository. But before I do, I can check the different between staging area and the most recent commit using 'git diff --staged'.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches are helpful when I need experimental features that will develop in their own way.

How do the diagrams help you visualize the branch structure?

	I can see the tips of each branch, including master branch. Also, from the tips, we can trace back all branches to list the history of commits. It's important to note that some commits are unreachable because each commit only stores reference to the previous commit, not vice versa.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together will combine two lines into one so that the features introduced in one branched and the changeds made in the other branch will be merged together into a new commit. Representing it in the diagram helps us see the relationship between commits. Commits from two branches will be interleaved and listed according to their time stamp.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	The pros of Git's automatic merging saves us time and a lot of eye-work in finding differences and merging them into one. The cons is that sometimes two commits have made changes to the same part of the original commit. Now that the automatic merging cannot decide for us, we need to consult the people who made changes respectively to decide what the merged commit will be. 
